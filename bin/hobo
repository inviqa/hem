#!/usr/bin/env ruby

$:.push File.expand_path(File.join("..", "..", "lib"), __FILE__)

# Suppress Net/SSH/Simple warning on windows
$SUPPRESS_32BIT_WARNING=1

require 'hobo/isolation'
::Hobo::Isolation.isolate

require 'hobo'

# Default main classes
error_handler = Hobo::ErrorHandlers::Friendly.new
Hobo.ui = Hobo::Ui.new
Hobo.logger = Logger.new(STDOUT)
Hobo.logger.level = Logger::WARN

# Low level / early arg parsing
# Anything that can alter ui / logger / cli should be here
# Early termination args should also go here
slop = Slop.parse! do
  on '--debug', 'Enable debugging' do
    require 'teerb'
    require 'tmpdir'
    error_handler = Hobo::ErrorHandlers::Debug.new
    debug_log = File.open(File.join(Dir.tmpdir, 'hobo_debug.log'), 'w+')
    Hobo.logger = Logger.new(TeeRb::IODelegate.new(STDOUT, debug_log))
    Hobo.logger.level = Logger::DEBUG
  end

  on '--ansi', 'Enable / disable ansi output', :invertable => true do
    Hobo.ui.use_color self.to_hash[:ansi]
  end

  on '--log-level=', 'Set log level' do
    level = self.to_hash[:'log-level'].upcase
    Hobo.logger.level = Logger.const_get(level) if [ 'DEBUG', 'INFO' ].include? level
  end

  on '--non-interactive', 'Run non-interactively. Defaults will be automatically used where possible.'
  on '--skip-host-checks', 'Skip host checks' # Deprecated but still used in some old automation (scrutinizer / jenkins)
end

Hobo.logger.formatter = proc do |severity, datetime, progname, msg|
  "#{datetime.strftime("%Y-%m-%d %H:%M:%S")}: #{severity}: #{msg}\n"
end

opts = slop.to_hash
Hobo.ui.interactive = !(opts[:'non-interactive'] == true)

begin
  Hobo.cli = Hobo::Cli.new(slop: slop)
  Hobo.cli.start
rescue Exception => error
  exit error_handler.handle(error)
end